package bot

import (
	"fmt"
	"github.com/op/go-logging"
	"github.com/tucnak/telebot"

	"../botDB"
	"../db"
	"time"
)

var log = logging.MustGetLogger("bot")

type handlerCtx struct {
	Telebot *telebot.Bot

	Message telebot.Message

	chat botDB.Chat
}

func Handle(bot *telebot.Bot, m telebot.Message) error {
	log.Info(m.Text)
	ctx := handlerCtx{
		Telebot: bot,
		Message: m,
	}
	return ctx.Handle()
}

func (ctx *handlerCtx) send(text string, keyboard [][]string) error {
	return ctx.Telebot.SendMessage(ctx.Message.Chat, text, &telebot.SendOptions{
		ReplyMarkup: telebot.ReplyMarkup{
			ResizeKeyboard:     true,
			HideCustomKeyboard: true,
			OneTimeKeyboard:    true,
			CustomKeyboard:     keyboard,
		},
	})
}

func (ctx *handlerCtx) Handle() error {
	chat, err := botDB.NewChat(ctx.Message.Chat.ID)
	if err != nil && err.Error() != "not found" {
		ctx.Telebot.SendMessage(
			ctx.Message.Chat,
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ... –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —ç—Ç–∏–º, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
			nil,
		)
		return err
	}

	ctx.chat = chat
	ctx.chat.TelegramChat = ctx.Message.Chat
	ctx.chat.Save()

	if ctx.Message.Text == "/start" {
		return ctx.Start()
	} else if ctx.Message.Text == "/reset" {
		return ctx.Reset()
	} else if ctx.Message.Text == "/hello" {
		return ctx.Hello()
	}

	switch ctx.chat.State {
	case "universitySuggest":
		return ctx.UniversitySuggest()
	case "facultySuggest":
		return ctx.FacultySuggest()
	case "groupSuggest":
		return ctx.GroupSuggest()
	case "schedule":
		return ctx.Schedule()
	default:
		return ctx.Start()
	}
}

func (ctx *handlerCtx) Start() error {
	text := "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –í–£–ó–æ–≤ - MUST HAVE –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞. " +
		"–ë–æ–ª–µ–µ 1 000 —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ –∏ 200 000 –¥–æ–≤–æ–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n" +
		"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä editor.rvuzov.ru :)\n\n" +
		"–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ rvuzov.ru –∏–ª–∏ –≥—Ä—É–ø–ø–µ vk.com/rvuzov\n\n" +
		"–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ help@rvuzov.ru"
	ctx.send(text, nil)
	return ctx.Reset()
}

func (ctx *handlerCtx) Reset() error {
	ctx.send("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏ –≥—Ä—É–ø–ø—É.", nil)
	return ctx.UniversitySuggestStart()
}

func (ctx *handlerCtx) Hello() error {
	ctx.send("Hi^-^", nil)

	return nil
}

func (ctx *handlerCtx) UniversitySuggestStart() error {
	ctx.send("–í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞", nil)
	ctx.chat.University = ""
	ctx.chat.Faculty = ""
	ctx.chat.Group = ""
	ctx.chat.State = "universitySuggest"
	ctx.chat.Save()
	return nil
}

func (ctx *handlerCtx) UniversitySuggest() error {
	for _, row := range ctx.chat.Keyboard {
		for _, item := range row {
			if item.Text == ctx.Message.Text {
				ctx.chat.State = "facultySuggest"
				ctx.chat.University = item.Action
				ctx.chat.Keyboard = nil
				ctx.chat.Save()

				ctx.send(fmt.Sprintf(`–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç "%s".`, ctx.Message.Text), nil)
				return ctx.FacultySuggestStart()
			}
		}
	}

	universities, _ := db.UniversitySearch(ctx.Message.Text)
	buttons := make([]ButtonItem, len(universities))
	for i, u := range universities {
		buttons[i] = ButtonItem(u)
	}
	keyboard := buildKeyboardList(buttons)
	if len(universities) != 0 {
		ctx.send(fmt.Sprintf("–°–ø–∏—Å–æ–∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É `%s`.\n\n–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª? –ò–∑–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", ctx.Message.Text), keyboard.ToTelebotKeyboard())
	} else {
		ctx.send(fmt.Sprintf("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É `%s`.\n\n–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", ctx.Message.Text), nil)
	}
	ctx.chat.Keyboard = keyboard

	ctx.chat.Save()
	return nil
}

func (ctx *handlerCtx) FacultySuggestStart() error {
	ctx.send("–í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞", nil)
	return nil
}

func (ctx *handlerCtx) FacultySuggest() error {
	for _, row := range ctx.chat.Keyboard {
		for _, item := range row {
			if item.Text == ctx.Message.Text {
				ctx.chat.State = "groupSuggest"
				ctx.chat.Faculty = item.Action
				ctx.chat.Keyboard = nil
				ctx.chat.Save()

				ctx.send(fmt.Sprintf(`–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç "%s".`, ctx.Message.Text), nil)
				return ctx.GroupSuggestStart()
			}
		}
	}

	faculties, _ := db.FacultySearch(ctx.chat.University, ctx.Message.Text)

	buttons := make([]ButtonItem, len(faculties))
	for i, u := range faculties {
		buttons[i] = ButtonItem(u)
	}
	keyboard := buildKeyboardList(buttons)
	if len(faculties) != 0 {
		ctx.send(fmt.Sprintf("–°–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É `%s`.\n\n–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª? –ò–∑–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", ctx.Message.Text), keyboard.ToTelebotKeyboard())
	} else {
		ctx.send(fmt.Sprintf("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É `%s`.\n\n–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", ctx.Message.Text), nil)
	}
	ctx.chat.Keyboard = keyboard
	ctx.chat.Save()

	return nil
}

func (ctx *handlerCtx) GroupSuggestStart() error {
	ctx.send("–í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã", nil)
	return nil
}

func (ctx *handlerCtx) GroupSuggest() error {
	for _, row := range ctx.chat.Keyboard {
		for _, item := range row {
			if item.Text == ctx.Message.Text {
				ctx.chat.State = "schedule"
				ctx.chat.Group = item.Action
				ctx.chat.Keyboard = nil
				ctx.chat.Save()

				ctx.send(fmt.Sprintf(`–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –≥—Ä—É–ø–ø–∞ "%s".`, ctx.Message.Text), nil)
				return ctx.Schedule()
			}
		}
	}

	groups, _ := db.GroupSearch(ctx.chat.Faculty, ctx.Message.Text)

	buttons := make([]ButtonItem, len(groups))
	for i, u := range groups {
		buttons[i] = ButtonItem(u)
	}
	keyboard := buildKeyboardList(buttons)
	if len(groups) != 0 {
		ctx.send(fmt.Sprintf("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ –∑–∞–ø—Ä–æ—Å—É `%s`. –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª?\n\n–ò–∑–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", ctx.Message.Text), keyboard.ToTelebotKeyboard())
	} else {
		ctx.send(fmt.Sprintf("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É `%s`.\n\n–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", ctx.Message.Text), nil)
	}
	ctx.chat.Keyboard = keyboard
	ctx.chat.Save()

	return nil
}

func (ctx *handlerCtx) Schedule() error {
	var keyboard Keyboard = Keyboard{
		[]botDB.KeyboardButtonOption{
			botDB.KeyboardButtonOption{
				Text:   "–í—á–µ—Ä–∞",
				Action: getHumanDate(time.Now().Add(-24 * time.Hour)),
			},
			botDB.KeyboardButtonOption{
				Text:   "–°–µ–≥–æ–¥–Ω—è",
				Action: getHumanDate(time.Now()),
			},
			botDB.KeyboardButtonOption{
				Text:   "–ó–∞–≤—Ç—Ä–∞",
				Action: getHumanDate(time.Now().Add(24 * time.Hour)),
			},
		},
	}
	ctx.chat.Keyboard = keyboard
	ctx.chat.Save()

	for _, row := range ctx.chat.Keyboard {
		for _, item := range row {
			if item.Text == ctx.Message.Text {
				lessons, _ := db.GetLessonsByDate(ctx.chat.Group, item.Action)
				if len(lessons) == 0 {
					ctx.send(fmt.Sprintf("%s\n–ù–µ—Ç—É –ø–∞—Ä", item.Action), keyboard.ToTelebotKeyboard())
				}
				for _, lesson := range lessons {
					text := fmt.Sprintf("%s-%s %s\n", lesson.Time.Start, lesson.Time.End, lesson.Subject)
					for _, teacher := range lesson.Teachers {
						text += teacher.Name + "\n"
					}
					ctx.send(text, keyboard.ToTelebotKeyboard())
				}
				return nil
			}
		}
	}

	ctx.send("–ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ :)", keyboard.ToTelebotKeyboard())
	ctx.send("üë®‚Äçüé®", keyboard.ToTelebotKeyboard())


	return nil
}

func getHumanDate(t time.Time) string {
	return t.Format("02.01.2006")
}
